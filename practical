DFS:

def dfs_iterative(graph, start):
    visited = set()  # To track visited nodes
    stack = [start]  # Stack for traversal

    while stack:
        node = stack.pop()  # Pop the top element
        if node not in visited:
            print(node, end=" ")  # Process the node
            visited.add(node)
            # Add neighbors to stack in reverse order for consistent ordering
            stack.extend(reversed(graph[node]))


# Example Usage
if __name__ == "__main__":
    # Graph represented as an adjacency list
    graph = {
        0: [1, 2],
        1: [0, 3, 4],
        2: [0, 5],
        3: [1],
        4: [1],
        5: [2]
    }

    print("Depth First Search (DFS) using Iterative Approach starting from node 0:")
    dfs_iterative(graph, start=0)


BFS:

from collections import deque

def bfs(graph, start):
    visited = set()  # To track visited nodes
    queue = deque([start])  # Queue for BFS traversal

    while queue:
        node = queue.popleft()  # Dequeue a node
        if node not in visited:
            print(node, end=" ")  # Process the node
            visited.add(node)
            # Add neighbors to the queue
            queue.extend(graph[node])


# Example Usage
if __name__ == "__main__":
    # Graph represented as an adjacency list
    graph = {
        0: [1, 2],
        1: [0, 3, 4],
        2: [0, 5],
        3: [1],
        4: [1],
        5: [2]
    }

    print("Breadth First Search (BFS) starting from node 0:")
    bfs(graph, start=0)

Best Fit Search:

def best_fit(capacity, items):
    # Sort items by size in ascending order
    items = sorted(items, key=lambda x: x[1])  # (name, size)
    result = []
    
    for name, size in items:
        if size <= capacity:
            result.append(name)
            capacity -= size
    
    return result

# Example usage
items = [("a", 5), ("b", 10), ("c", 3), ("d", 8)]  # (item, size)
capacity = 15
result = best_fit(capacity, items)
print("Selected items:", result)

n*n queen problem:
def print_board(board):
    for row in board:
        print(" ".join("Q" if col else "." for col in row))
    print()

def is_safe(board, row, col, n):
    # Check vertical direction
    for i in range(row):
        if board[i][col]:
            return False

    # Check upper-left diagonal
    for i, j in zip(range(row, -1, -1), range(col, -1, -1)):
        if board[i][j]:
            return False

    # Check upper-right diagonal
    for i, j in zip(range(row, -1, -1), range(col, n)):
        if board[i][j]:
            return False

    return True

def solve_n_queens(board, row, n):
    if row == n:
        print_board(board)
        return True

    for col in range(n):
        if is_safe(board, row, col, n):
            board[row][col] = 1  # Place queen
            if solve_n_queens(board, row + 1, n):
                return True
            board[row][col] = 0  # Backtrack

    return False

def n_queens(n):
    board = [[0] * n for _ in range(n)]
    if not solve_n_queens(board, 0, n):
        print("No solution exists")

# Example usage
n = 8  # Change this value for a different board size
n_queens(n)


write program in prolog calculate addition of two number

% Define a rule to add two numbers
add(X, Y, Sum) :- 
    Sum is X + Y.

% Example queries:
% ?- add(5, 3, Result).
% Result = 8.




write program in prolog to find maximum of two numbers

% Define a rule to find the maximum of two numbers
max(X, Y, Max) :-
    ( X >= Y -> Max = X ; Max = Y ).

% Example queries:
% ?- max(5, 3, Result).
% Result = 5.
% ?- max(2, 10, Result).
% Result = 10.


write the program in prolog that take number n from the user and count from n to 10 

% Base case: stop when the number reaches 10.
count_to_ten(10) :- 
    write(10), nl.

% Recursive case: print the current number and proceed to the next.
count_to_ten(N) :- 
    N < 10, 
    write(N), nl,
    Next is N + 1,
    count_to_ten(Next).

% Start counting from the user-specified number.
start_counting :-
    write('Enter a number (N): '), 
    read(N),
    ( N =< 10 ->
        count_to_ten(N)
    ;
        write('Please enter a number less than or equal to 10.'), nl
    ).

write the program in prolog that take number n from the user and count from n to 1

% Base case: stop when the number reaches 1.
count_to_one(1) :-
    write(1), nl.

% Recursive case: print the current number and proceed to the next smaller number.
count_to_one(N) :-
    N > 1,
    write(N), nl,
    Next is N - 1,
    count_to_one(Next).

% Start counting from the user-specified number.
start_counting :-
    write('Enter a number (N): '),
    read(N),
    ( N >= 1 ->
        count_to_one(N)
    ;
        write('Please enter a number greater than or equal to 1.'), nl
    ).

write the program in prolog that take number n from the user calculate factorial of number.

% Base case: Factorial of 0 is 1.
factorial(0, 1).

% Recursive case: Factorial of N is N * factorial of (N-1).
factorial(N, Result) :-
    N > 0,
    N1 is N - 1,
    factorial(N1, TempResult),
    Result is N * TempResult.

% Start factorial calculation
start_factorial :-
    write('Enter a number (N): '),
    read(N),
    ( N >= 0 ->
        factorial(N, Result),
        write('The factorial of '), write(N), write(' is: '), write(Result), nl
    ;
        write('Please enter a non-negative number.'), nl
    ).

write the program in prolog that take number n from the user calculate the sqaure of number from n to 20 and display it.

% Base case: When N exceeds 20, stop the recursion
square_up_to_20(N) :-
    N > 20, !.

% Recursive case: Calculate the square of N and proceed to the next number
square_up_to_20(N) :-
    N =< 20,
    Square is N * N,
    write('The square of '), write(N), write(' is: '), write(Square), nl,
    N1 is N + 1,
    square_up_to_20(N1).

% Start the process
start_squares :-
    write('Enter a number (N): '),
    read(N),
    ( N =< 20 ->
        square_up_to_20(N)
    ;
        write('Please enter a number between N and 20.'), nl
    ).



